name: Handle /cutover or /archive command

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write

jobs:
  handle-command:
    if: contains(github.event.comment.body, '/cutover') || contains(github.event.comment.body, '/archive')
    runs-on: ubuntu-latest

    steps:
      - name: Validate command format
        id: validate
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          echo "Comment: $COMMENT_BODY"

          if [[ "$COMMENT_BODY" =~ ^/(cutover|archive)[[:space:]]+INC[0-9]{7}$ ]]; then
            echo "Valid format"
            echo "valid=true" >> "$GITHUB_OUTPUT"
            COMMAND=$(echo "$COMMENT_BODY" | awk '{print $1}' | sed 's|/||')
            SNOW_ID=$(echo "$COMMENT_BODY" | grep -oE 'INC[0-9]{7}')
            echo "command=$COMMAND" >> "$GITHUB_OUTPUT"
            echo "snow_id=$SNOW_ID" >> "$GITHUB_OUTPUT"
          else
            echo "Invalid format"
            echo "valid=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment on issue if invalid
        if: steps.validate.outputs.valid == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ⚠️ **Invalid command format.**

            ✅ **Correct format examples:**
            ```
            /cutover INC1234567
            /archive INC7654321
            ```

            ❓ Must start with `/cutover` or `/archive` followed by a space and a valid `INC` number (7 digits).

      - name: Exit on invalid command
        if: steps.validate.outputs.valid == 'false'
        run: |
          echo "Exiting due to invalid format"
          exit 1

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Create SNOW ID label and add to issue
        uses: actions/github-script@v7
        with:
          script: |
            const snowId = "${{ steps.validate.outputs.snow_id }}";
            const issueNumber = context.payload.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            try {
              await github.rest.issues.getLabel({
                owner,
                repo,
                name: snowId
              });
              console.log(`Label '${snowId}' already exists.`);
            } catch (error) {
              if (error.status === 404) {
                await github.rest.issues.createLabel({
                  owner,
                  repo,
                  name: snowId,
                  color: 'ededed',
                  description: 'Auto-generated SNOW ID label'
                });
                console.log(`Label '${snowId}' created.`);
              } else {
                throw error;
              }
            }

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: issueNumber,
              labels: [snowId]
            });
