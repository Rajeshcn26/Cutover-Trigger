name: Archive Repository (Test)
run-name: Archive Repository - ${{ github.event.issue.title }}

on:
  issue_comment:
    types: [created]

jobs:
  archive-repository:
    if: contains(github.event.comment.body, '/archive')
    runs-on: ubuntu-latest

    steps:
      - name: Validate archive command format
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment;
            if (!comment || !comment.body) {
              core.setFailed('No comment found in the event payload.');
              return;
            }

            const body = comment.body.trim();
            const archiveCmd = /^\/archive\s+(.+)$/;
            const archiveOnlyCmd = /^\/archive\s*$/;

            let labels = [];
            if (archiveOnlyCmd.test(body)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: "‚ùå **Invalid command format.**\n\nPlease use the format:\n\n```\n/archive <label1> <label2> ...\n```\nExample:\n```\n/archive TKT12345678 Email Excel\n```\n\nThis will trigger the archive workflow and add each as an issue label."
              });
              core.setOutput('proceed', 'false');
              core.setFailed('Invalid archive command format.');
            } else if (archiveCmd.test(body)) {
              // Extract everything after "/archive"
              const match = archiveCmd.exec(body);
              // Split by spaces, filter out empty strings
              labels = match[1].split(/\s+/).filter(Boolean);
              if (labels.length === 0) {
                core.setOutput('proceed', 'false');
                core.setFailed('No valid labels provided.');
              } else {
                core.setOutput('proceed', 'true');
                core.setOutput('labels', JSON.stringify(labels));
              }
            } else {
              core.setOutput('proceed', 'false');
              core.setFailed('Unrecognized archive command format.');
            }

      - name: Add archive-in-progress label
        if: steps.validate.outputs.proceed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['archive-in-progress']
            });

      - name: Checkout Code
        if: steps.validate.outputs.proceed == 'true'
        uses: actions/checkout@v4

      # You may comment out the Setup Ruby and Archive Script steps if not needed for testing
      - name: Setup Ruby
        if: steps.validate.outputs.proceed == 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2 # use any version you want for test

      - name: Run the archive script
        if: steps.validate.outputs.proceed == 'true'
        run: |
          echo "Simulating archive script. Issue body: ${{ github.event.issue.body }}"
          echo "Comment body: ${{ github.event.comment.body }}"
          echo "Labels to be added: ${{ steps.validate.outputs.labels }}"
          # exit 1 to simulate failure for testing
          # exit 0 to simulate success for testing

      - name: Add archive-success label
        if: success() && steps.validate.outputs.proceed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              name: 'archive-in-progress'
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['status-archive-success']
            });

      - name: Add archive-failure label
        if: failure() && steps.validate.outputs.proceed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              name: 'archive-in-progress'
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['status-archive-failure']
            });

      - name: Add labels to issue
        if: success() && steps.validate.outputs.proceed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const labels = JSON.parse('${{ steps.validate.outputs.labels }}');
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
